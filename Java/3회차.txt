* 문제 풀이

3번.

import java.util.Scanner;

public class Exercise3 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.print("아무런 숫자나 입력해보세요: ");

        int num = scan.nextInt();
        System.out.println("입력값은 = " + num);
    }
}



4 번.

import java.util.Scanner;

public class Exercise4 {
    public static void main(String[] args) {
        System.out.println("5로 나눠서 1이 남는 숫자 찾기");

        Scanner scan = new Scanner(System.in);
        System.out.print("아무런 숫자나 입력해보세요: ");

        int num = scan.nextInt();
        System.out.println("입력값은 = " + num);

        // num을 5로 나눠서 나머지가 1인가 ?
        if(num % 5 == 1) {
            System.out.println(num + "은(는) 5로 나눠서 1이 남는다.");
        } else {
            System.out.println(num + "은(는) 5로 나눠서 1이 남지 않는다.");
        }
    }
}



5 번.

import java.util.Scanner;

public class Exercise5 {
    public static void main(String[] args) {
        System.out.println("2의 n승을 판정해보자!");

        Scanner scan = new Scanner(System.in);
        System.out.print("아무런 숫자나 입력해보세요: ");

        int num = scan.nextInt();
        System.out.println("입력값은 = " + num);

        // 2의 n승이란 ?
        // 0000 0001    1
        // 0000 0010    2
        // >>>>>>>>>>>>>>
        // 0000 0011    3
        // <<<<<<<<<<<<<<
        // 0000 0100    4
        // >>>>>>>>>>>>>>
        // 0000 0101    5
        // <<<<<<<<<<<<<<
        // >>>>>>>>>>>>>>
        // 0000 0110    6
        // <<<<<<<<<<<<<<
        // 0000 1000    8
        // 0001 0000    16
        // 0010 0000    32
        // 0100 0000    64
        if(num == 0) {
            System.out.println("0 입니다.");
        }

        // Q: 조건식에 괄호가 없으면 왜 오류인가 ?
        // A: 아래 case A 코드를 보면 빨간줄이 나오는데
        //    빨간줄에 커서를 갖다 대면 required type: boolean
        //    provided type: int 라는 차이 보일 것이다.
        //    컴퓨터가 요구하는 타입은 boolean(논리형)인데
        //    사용자가 작성하여 제공한 타입이 int 형이기 때문에 오류!

        //    case B의 경우엔 '==' 같은가요 ? 라는 질문이다.
        //    이 질문에 대한 답은 yes(true) 혹은 no(false) 뿐이다.

        //    boolean은 참 혹은 거짓을 표현하는 데이터 타입이다.

        //    case C의 경우엔 에러 메시지가 아래와 같다.
        //    Operator '&' cannot be applied to 'int', 'boolean'
        //    비트 연산자 AND는 int와 boolean간에 적용이 불가능하다.
        //    산술 비트 연산은 정수형 변수 혹은 상수(3, 5 등등)끼리 가능하다.
        //    연산자 우선순위가 & 보다 == 이 높아서 이런 현상이 발생함
        
        // Q: case A의 괄호는 조건이 아닌가요 ?
        // A: 단순히 산술 연산식입니다.
        //    조건이 되려면 case B나 C처럼 질문을 해야함.
        //    그러면 질문의 대한 답이 false(거짓) 혹은 true(참)으로 나옴

        // case A: if(num & (num - 1))
        // case B: if( (num & (num - 1)) == 0)
        // caes C: if(num & (num - 1) == 0)
        
        // Q: 2이 n승을 판정하는 알고리즘이 이해가 안갑니다.
        // A: 일단은 2의 n승이 가지는 특성을 살펴봐야 한다.
        //    대표적인 특성이 2의 n승과 2의 n승 - 1 의 특성임

        // 15 = 01111(2): 2^4 - 1
        // 16 = 10000(2): 2^4
        //
        // 7 = 00111(2): 2^3 - 1
        // 8 = 01000(2): 2^3
        //
        // 3 = 00011(2): 2^2 - 1
        // 4 = 00100(2): 2^2

        // 2진수 특성상 2의 n승에서 1을 빼면
        // 해당 자리수가 0 이되고 나머지 아래의 자리값은 모두 최대값이 된다.
        
        // 10000 - 1
        //  9999

        // 16 8 4 2 1
        //  1 0 0 0 0 (2) - 00001(2)
        //  0 1 1 1 1 (2)   AND: 같은 자리수에 서로 값이 참(1)인 경우에만 참(1)
        // ------------------
        //  0 0 0 0 0 (2)

        //  0 1 1 1 1 (2)
        //  0 1 0 0 0 (2)

        //  2의 n승과 2의 n승 - 1의 AND는 어떤 상황에서든지 0을 만들게 된다.

        // Q: 2^n + 1을 XOR로 하면 안될까요 ?
        // A: 아래와 같이 기준(결과값 31, 15 등등)이 모호하게 됩니다.

        //  0 1 1 1 1 (2):  15
        //  1 0 0 0 0 (2):  16   XOR
        // -------------------------
        //  1 1 1 1 1    :  31

        //  0 1 1 1 (2):  7
        //  1 0 0 0 (2):  8   XOR
        // -------------------------
        //  1 1 1 1    :  15

        // Q: (num ^ (num + 1)) == (num + (num + 1))는 안될까요 ?
        // A: (num & (num - 1)) == 0 위의 케이스와 현재 케이스의 비교시
        //    연산량이 위의 케이스가 더 많습니다.
        //    프로그램 최적화 차원에서
        //    위의 케이스보다 아래의 케이스가 조금 더 효율적입니다.
        //    문제를 풀 수는 있습니다 - 속도가 조금 떨어질뿐
        // Err: + 1 로 할 경우 입력값이 2^n - 1이어야 참이됨
        // Sol: (num ^ (num - 1)) == (num + (num - 1))
        //      위의 형식으로 해야 입력값을 2^n일 때 참
        //      아래 boolean 코드는 증명
        boolean res = (num ^ (num - 1)) == (num + (num - 1));
        System.out.println("res = " + res);

        // int res = num & (num - 1);
        if( (num & (num - 1)) == 0 ) {
            System.out.println("입력 숫자 " + num + "은 2의 n승입니다.");
        } else {
            System.out.println("입력 숫자 " + num + "은 2의 n승이 아닙니다.");
        }
    }
}



6 번.

import java.util.Scanner;

public class Exercise6 {
    public static void main(String[] args) {
        // 1500이 입력되면 정지하는 시스템이 있다.
        // 입력값은 1000 ~ 2000 사이의 숫자다.
        // (아직 랜덤을 배우지 않았으므로 키보드 입력으로 처리한다)
        // 1470 이하의 값을 넣으면 후진
        // 1530 이상의 값을 넣으면 전진한다.
        // 1471 ~ 1529 전체가 정지 구간
        // 999 이하 정지, 2001 이상도 정지
        Scanner scan = new Scanner(System.in);

        System.out.print("제어 pwm을 입력하세요: ");
        int pwm = scan.nextInt();

        System.out.println("당신이 입력한 pwm 값: " + pwm);
        
        if(pwm > 2000) {        // pwm이 2000 보다 크다면
            System.out.println("잘못된 값 입력!");
        } else if(pwm >= 1530) {// pwm이 1530 보다 크다면 && 2000 보다 작거나 같다면
            System.out.println("전진");
        } else if(pwm > 1470) { // pwm이 1470 보다 크다면 && 1530 보다 작다면
            System.out.println("정지");
        } else if(pwm > 999) {  // pwm이 999 보다 크다면 && 1470 보다 작거나 같다면
            System.out.println("후진");
        } else {                // pwm이 999 보다 작거나 같다면
            System.out.println("잘못된 값 입력!");
        }
    }
}



랜덤 예제

import java.util.Random;

public class RandomInst {
    public static void main(String[] args) {
        // 우선은 사용법 위주로 보면 됩니다.
        Random rand = new Random();

        // bound는 범위의 개수를 지정하는 녀석임
        // 입력할 필요가 없으며 자동 완성 기능으로 나타나는 것
        int randNum = rand.nextInt(2);
        System.out.println("0 ~ 1 까지 2개의 값을 뽑아요: " + randNum);

        randNum = rand.nextInt(6);
        System.out.println("0 ~ 5 까지 6개의 값을 뽑는다: " + randNum);

        // 왜 ? rand.nextInt(6) + 1 이 1 ~ 6까지가 되나요 ?
        // rand.nextInt(6)의 범위가 0 ~ 5로 6개
        // 0 ~ 5 전체에 1을 더하면 ?
        // 1 ~ 6
        randNum = rand.nextInt(6) + 1;
        System.out.println("1 ~ 6 까지 주사위 굴리기: " + randNum);
    }
}



랜덤 예제 2.

import java.util.Random;

public class RandomInst {
    public static void main(String[] args) {
        // 우선은 사용법 위주로 보면 됩니다.
        Random rand = new Random();

        // bound는 범위의 개수를 지정하는 녀석임
        // 입력할 필요가 없으며 자동 완성 기능으로 나타나는 것
        int randNum = rand.nextInt(2);
        System.out.println("0 ~ 1 까지 2개의 값을 뽑아요: " + randNum);

        randNum = rand.nextInt(6);
        System.out.println("0 ~ 5 까지 6개의 값을 뽑는다: " + randNum);

        // 왜 ? rand.nextInt(6) + 1 이 1 ~ 6까지가 되나요 ?
        // rand.nextInt(6)의 범위가 0 ~ 5로 6개
        // 0 ~ 5 전체에 1을 더하면 ?
        // 1 ~ 6
        randNum = rand.nextInt(6) + 1;
        System.out.println("1 ~ 6 까지 주사위 굴리기: " + randNum);
    }
}



* while 예제

public class WhileTest {
    public static void main(String[] args) {
        // 1 ~ 10 까지 출력해보기 ~
        int num = 1;

        // while 문을 작성하는 방법
        // 1. while을 적고 괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. 괄호 안에 조건을 작성한다.
        //    (조건이 만족하는 동안 반복)
        // 3. 반복시킬 내용을 중괄호 내부에 작성한다.

        // num < 11이 조건이 되었으며
        // Phase 1) 현재 num값이 1 이므로 조건은 참이 된다.
        // Phase 2) 다시 위의 조건을 검사하고 num은 2이므로 참이다.
        // .......
        // Phase 10) 현재 num은 10일 것임
        // Phase 11) 현재 num이 11이므로 조건이 거짓이 된다.
        while(num < 11) {
            // Phase 1) 현재 num 값을 뿌리고 num 값을 1 증가시킨다.
            // Phase 2) 현재 num 값을 뿌리고 num 값을 1 증가
            // ........
            // Phase 10) 현재 num 값을 뿌리고 num 값을 1 증가
            System.out.println("num = " + num++);
        }

        System.out.println("마지막 num = " + num);
    }
}



* 응용 문제 1.

2 ~ 19 사이의 숫자를 출력해보자!

public class Quiz1 {
    public static void main(String[] args) {
        // 2 ~ 19 사이의 숫자를 출력해보자!
        int num = 2;

        while(num < 20) {
            System.out.println("num = " + num++);
        }
    }
}



* 응용 문제 2.

2 ~ 19 사이의 숫자중 짝수만 찾아보자!

public class Quiz2 {
    public static void main(String[] args) {
        // 2 ~ 19 사이의 숫자중 짝수만 찾아보자!
        int num = 2;

        while(num < 20) {
            // if문 내부에 num++이 들어있을 경우
            // 조건을 만족하는 경우에만 +1이 되므로
            // 무한 반복을 하며 같은 숫자만 출력하게 된다.
            if(num % 2 == 0) {
                System.out.println("num = " + num);
            }

            // 조건에 관계없이 지속적으로 값을 상승시키기 위함
            num++;
        }
    }
}



* 응용 문제 3.

2 ~ 19 사이의 숫자중 짝수의 합을 구해보자!

public class Quiz3 {
    public static void main(String[] args) {
        // 2 ~ 19 사이의 숫자중 짝수의 합을 구해보자!
        int num = 2;
        int sum = 0;

        while(num < 20) {
            if(num % 2 == 0) {
                System.out.println("num = " + num);
                // sum = sum + num 과 동의어
                sum += num;
                // sum = sum - num
                // sum -= num

                // sum = sum * num
                // sum *= num

                // sum = sum / num
                // sum /= num

                // sum = sum % num
                // sum %= num
            }

            num++;
        }

        // 2 ~ 18
        // 2 4 6 8 10 12 14 16 18
        System.out.println("2 ~ 19 까지 짝수들의 합 = " + sum);
    }
}



* 응용 문제 4.

A의 주사위와 B의 주사위를 만들고
주사위를 각자 굴려서
더 높은 숫자가 나온 사람이 이기게 만들어보자!

import java.util.Random;

public class Quiz4 {
    public static void main(String[] args) {
        // A의 주사위와 B의 주사위를 만들고
        // 주사위를 각자 굴려서
        // 더 높은 숫자가 나온 사람이 이기게 만들어보자!
        Random rand = new Random();

        int i = 0;

        while(i < 100) {
            int diceA = (int) (Math.random() * 6) + 1;
            int diceB = rand.nextInt(6) + 1;

            // System.out.printf
            // System.out.println
            // System.out.print
            // 각각의 차이점은 무엇인가 ?
            // print는 단순히 출력을 수행하며 앤터 입력이 제외된다.
            // println은 출력과 함께 앤터가 입력된다.
            // printf는 특정한 포맷(서식)을 가지고 출력된다.
            // 여기서 %d 와 \n 은 서식에 해당한다.
            // \n의 경우가 앤터 입력에 해당한다.
            // %d %d %d 형식으로 오게 될 경우
            // 구분자 ',' 를 통해 각각에 값이 대입되는 형식으로 사용됨
            // 주의할점은 %d의 경우 정수형(int)만 가능하며
            // %f의 경우 실수형(float, double)만 가능하다.

            // printf의 장점:
            // System.out.printf("A 승리! %d vs %d\n", diceA, diceB);
            // System.out.println("A 승리! " + diceA + " vs " + diceB);

            if (diceA > diceB) {
                System.out.printf("A 승리! %d vs %d\n", diceA, diceB);
            } else if (diceA < diceB) {
                System.out.printf("B 승리! %d vs %d\n", diceA, diceB);
            } else {
                System.out.printf("무승부! %d vs %d\n", diceA, diceB);
            }

            i++;
        }
    }
}



* 응용 문제 5.

피보나치 수열을 프로그래밍으로 구현해보자!
구체적으로 13번째 항의 숫자를 구하도록 만들어보자!

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, .......

힌트

1) 숫자가 올라가는 규칙을 찾아야 한다.
2) 구현을 한다 했을 경우 while() 을 사용해야함
3) 첫번째 더할값, 두번째 더할값, 계산한 값의 변수가 3개 필요함

public class Quiz5 {
    public static void main(String[] args) {
        // 피보나치 수열을 프로그래밍으로 구현해보자!
        // 구체적으로 13번째 항의 숫자를 구하도록 만들어보자!
        //
        // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, .......
        //
        // 힌트
        //
        // 1) 숫자가 올라가는 규칙을 찾아야 한다.
        // 2) 구현을 한다 했을 경우 while() 을 사용해야함
        // 3) 첫번째 더할값, 두번째 더할값, 계산한 값의 변수가 3개 필요함

        // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, .......
        final int TARGET = 13;
        final int ALREADY = 2;

        int loop = 0;
        int first = 1, second = 1, res = 0;

        // first   second   res
        //   1       1       2
        //   1       2       3
        //   2       3       5
        //   3       5       8

        // 2는 왜 빼나요 ?
        // 첫번째 항 + 두 번째 항 = 결과
        while(loop < TARGET - ALREADY) {
            res = first + second;
            first = second;
            second = res;

            loop++;
        }

        System.out.println("res = " + res);
    }
}



* 응용 문제 6.

1, 1, 3, 4, 5, 8, 12, 17, 25, 37, 54, 79, ...
위 수열에서 20번째 숫자를 찾도록 프로그래밍 해보자!

- 규칙

첫번째 항 + 세번째 항 = 네번째
두번째 항 + 네번째 항 = 다섯번째

public class Quiz6 {
    public static void main(String[] args) {
        // - 규칙(20번째)
        //
        // 첫번째 항 + 세번째 항 = 네번째
        // 두번째 항 + 네번째 항 = 다섯번째
        // 1, 1, 3, 4, 5, 8, 12, 17, 25, 37, 54, 79, ...
        final int TARGET = 20;
        final int ALREADY = 3;

        int loop = 0;
        int first = 1, second = 1, third = 3, res = 0;

        while(loop < TARGET - ALREADY) {
            res = first + third;
            first = second;
            second = third;
            third = res;

            loop++;
        }

        System.out.println("res = " + res);
    }
}



* 반복문에서 break 사용 예제

public class BreakTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while(i < MAX) {
            System.out.println("i = " + i++);
            
            if(i == 5) {
                System.out.println("걸렸다!");
                // 반복 내에서 break 하는 순간 반복 자체를 종료함
                break;
            }
        }

        System.out.println("이건 어디서나 동작하는 녀석");
    }
}



* 반복문에서 continue 사용 예제

public class ContinueTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while(i < MAX) {
            i++;

            // Q: 4가 왜 빠지나요 ?
            // A: continue 하는 시점이 5
            //    continue를 하면 다시 루프로 올라간다.
            //    다시 올라가서 ++ 을 하므로 6
            if(i == 5) {
                System.out.println("걸렸다!");
                // continue를 수행하면
                // 현재 진행하던 작업을 멈추고 다시
                // 루프(반복)의 최상위로 이동한다.
                continue;
            }

            System.out.println("i = " + (i - 1));
        }

        System.out.println("이건 어디서나 동작하는 녀석");
    }
}



퀴즈 7.

1 ~ 10 까지의 숫자중 7을 만나면 종료하도록 출력해보자!

public class Quiz7 {
    public static void main(String[] args) {
        // 1 ~ 10 까지의 숫자중 7을 만나면 종료하도록 출력해보자!
        final int TARGET = 11;
        int i = 1;

        while(i < TARGET) {
            if(i == 7) {
                break;
            }

            System.out.println("i = " + i);

            i++;
        }
    }
}



퀴즈 8.

1 ~ 10 까지의 숫자중 8만 제외하고 출력해보자!

public class Quiz8 {
    public static void main(String[] args) {
        // 1 ~ 10 까지의 숫자중 8만 제외하고 출력해보자!
        final int MAX = 10;
        int i = 0;

        while(i < MAX) {
            i++;

            if(i == 8) {
                continue;
            }

            System.out.println("i = " + i);
        }
    }
}



* for 문 예제

public class ForTest {
    public static void main(String[] args) {
        int i;

        // for 문을 작성하는 방법
        // 1. for를 적고 소괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. for의 소괄호 구성은 아래와 같다.
        //    (초기화; 조건; 증감부) 형식으로 구성된다.
        //    초기화 부분이 없을 수도 있으며
        //    조건이 없을 수도 있고
        //    증감부가 없을 수도 있다.
        //    모든것이 없다면 무한 루프가 될 수 있다.
        // 3. 중괄호 내부에는 while 과 마찬가지로 반복시킬 내용을 작성한다.
        
        // for 문을 보는 방법
        // for(i = 0; i < 3; i++) 의 의미는 무엇인가 ?
        // i = 0: 초기화 부분
        // 초기화 부분은 for 문 진입시 최초로 한 번만 수행된다.
        // 반복하는 도중에는 초기화 부분을 실행하지 않는다.
        // i < 3: 조건이 만족되는 동안 반복을 한다.
        // i++: 증감은 i += 2 와 같은 형식으로도 작성이 가능하다.
        
        // 동작 과정
        // 초기화: 최초로 한 번만
        // 조건: 조건이 만조되는 동안만 반복 -> 조건이 만족되면 중괄호로 이동
        // 증감부: 값을 증가하거나 감소시킴 -> 증감 이후에 조건을 확인함
        for(i = 0; i < 3; i++) {
            System.out.println("i = " + i);
            // 중괄호 내용이 완료되면 증감부로 이동한다.
        }

        for(int j = 0; j < 4; j++) {
            System.out.println("j = " + j);
        }

        System.out.println("나는 여기서도 나와 = " + i);
        // System.out.println("나는 왜 안돼 ? " + j);
        // 더 이상 main 내에서 j가 살아있는 변수가 아니기 때문이다.
    }
}



연습 문제 7.

for 를 사용해서 2의 배수만 출력하도록 프로그래밍 해보자!
방식이 두 가지가 정도 있을 수 있는데
앞서 소개했던 꼼수와 정석이 있다.
원하는 형식으로 만들어보자!

public class Exercise7 {
    public static void main(String[] args) {
        // for 를 사용해서 2의 배수만 출력하도록 프로그래밍 해보자!
        // 방식이 두 가지가 정도 있을 수 있는데
        // 앞서 소개했던 꼼수와 정석이 있다.
        // 원하는 형식으로 만들어보자!
        System.out.println("실제 조건 검사 없이 짝수 판정하기");

        for(int i = 2; i < 11; i += 2) {
            System.out.println("i = " + i);
        }

        System.out.println("if 문을 활용한 짝수 판정");

        for(int i = 1; i < 11; i++) {
            if(i % 2 == 0) {
                System.out.println("i = " + i);
            }
        }
    }
}



연습 문제 8.

1 ~ 30 까지의 숫자중 2 혹은 3의 배수는 더하고 5의 배수는 뺀다.
혼동의 여지를 방지하기 위해
10 처럼 2의 배수이면서 5의 배수가 되는 경우엔
빼기도 하고 더하기도 하므로 결론적으로 0



* 무한 루프(멈추지 않아 ~) 예제

public class InfinityLoopTest {
    public static void main(String[] args) {
        // 조건이 없다 ? 무 조 건
        for(;;) {
            System.out.println("가즈아 ~");
        }
    }
}



* 증감부만 있는 무한 루프 예제

public class InfinityLoopTest2 {
    public static void main(String[] args) {
        int i = 1;

        for(;; i++) {
            System.out.println("i = " + i);
        }
    }
}




연습 문제 9.

주사위 게임을 해보자!
이 주사위 게임의 규칙은 다음과 같다.
홀수가 나오면 주사위를 계속해서 굴릴 수 있고
마지막에 짝수가 나오면 주사위를 멈춘다.
이때 마지막 주사위 눈금을 구하도록 프로그래밍 해보자!

9-1) 먼저 주사위 눈금을 출력하도록 프로그래밍 해본다.
9-2) 주사위 눈금이 홀수인지 판정해본다.
9-3) 홀수가 판정되면 계속해서 주사위를 굴리도록 만들어본다.





* 월요일, 화요일 리눅스 설치

- 자기 소개서 작성: 해당 내용을 기준으로 1:1 면담 진행

1) 전공(세부 사항을 작성해주세요)
    기계공학 - 캐드, 물리 같은것들 ...
    전자공학 - 회로 설계, 펌웨어, C ...
    컴퓨터공학 - 컴퓨터 구조, 운영체제, 자바 ...
    업무로 했던 일 - 솔루션 개발, 차량 펌웨어 개발 등등
2) 어떤 공부를 해왔는지
3) 어떠한 목적을 가지고 이 과정을 듣게 되었는지
4) 현재 제일 관심있는 분야가 무엇인지
5) 앞으로의 포부



