* if문 기본 예제

package second;

import java.util.Scanner;

public class SecondProbTest {
	public static void main(String[] args) {
		// 변수란 ?
		// 1. 값을 받는 것
		// 엄밀한 정의: 특정한 데이터타입을 저장할 수 있는 메모리 공간
		// 너프한 정의: 특정한 데이터타입을 저장할 수 있는 공간
		
		// 입력받은 숫자가 2의 배수인지 판별해보자!
		// 아래 보이는 Scanner scan = new Scanner(System.in)
		// 이 전체가 scan이라는 변수를 통해서
		// 키보드 입력을 받을 것임을 알려주는 것
		Scanner scan = new Scanner(System.in);  // 준비 과정
		// new Scanner(System.in) 을 통해 실제 키보드 정보를 획득
		
		System.out.print("숫자를 입력하세요: ");
		
		// 키보드 입력에 대한 처리는 아래 코드에서 수행합니다.
		// scan.nextInt() 실제 키보드 입력을 처리하는 부분
		
		// '=' 은 ~~과 같다가 아닌 대입 연산임을 명심하자!
		int num = scan.nextInt();
		
		System.out.println("입력 결과는 = " + num);
		
		// num % 2
		// % 연산자는 나머지를 구하는 연산자다.
		// num % 2 는 'num을 2로 나눈 나머지를 구해주세요'.
		// 어떤 수를 2로 나눈 나머지는 0 혹은 1 뿐이다.
		// 여기서 나머지가 0이란 뜻은 2로 나눠 떨어진다는 뜻이며
		// 2로 나눠 떨어진다면 이 값은 짝수임을 알 수 있다.
		// 나머지가 0이 아니라 1인 상황은 홀수 일 것이다.
		
		// '==' 은 앞에것과 뒤의것이 같은지 질문을 하는 것이다.
		// 질문에 답이 맞다면 true(1), 아니라면 false(0)
		// num을 2로 나눈 나머지가 0이 맞나요 ?
		// else는 if에 대한 조건이 맞지 않을 경우 사용한다.
		// else가 동작하는 시점은 if의 괄호에 있는 조건이
		// 거짓(false)가 되었을 경우에 동작하게 된다.
		if(num % 2 == 0) {
			System.out.println("짝수입니다.");
		} else {
			System.out.println("홀수입니다.");
		}
	}
}



* if 문을 작성하는 방법

1. if를 적고 소괄호를 열고 닫고 중괄호를 열고 닫는다.
   if() {}
2. 소괄호 내부에 조건을 작성한다.
   (해당 조건이 만족되면 중괄호의 내용을 수행한다)
3. 중괄호 내부에 구동시킬 코드를 작성한다.



* 인텔리제이 설치

intellij toolbox 로 구글 검색
IntelliJ Ultimate 혹은 Community Edition 중에 상황에 맞게 설치
(얼티메이트는 현재 신분이 학생이라면 무료 사용 가능)



* 삼항 연산자 예제

import java.util.Scanner;

public class IfTest {
    // psvm
    public static void main(String[] args) {
        // sout
        System.out.println("안녕, 난 인텔리제이야 ~");

        String str1 = "짝수";
        String str2 = "홀수";

        Scanner scan = new Scanner(System.in);

        System.out.print("숫자를 입력하세요: ");
        // 키보드 입력으로 받은 숫자를 num 변수에 대입
        int num = scan.nextInt();

        // 문자열과 숫자가 + 되면
        // 자동으로 숫자는 문자열이 되어서 처리된다.
        System.out.println("당신이 입력한 숫자는 = " + num);
        System.out.println("당신이 입력한 숫자는 = " + num + num);
        // 실제로 숫자를 처리하고자 한다면
        // 연산의 순서를 아래와 같이 변경하여 작업하면 된다.
        System.out.println("당신이 입력한 숫자는 = " + (num + num));

        // 3항 연산자를 작성하는 방법
        // 먼저 3항 연산자는 아래와 같은 형식으로 구성된다.
        // 조건 ? 참인경우 : 거짓인경우

        // 아래 케이스의 경우엔 조건에 따라 결과값이 바뀌는데
        // 이 값을 res라는 변수에 대입한 것이다.
        String res = num % 2 == 0 ? str1 : str2;

        System.out.println(num + "은 " + res + " 입니다!");
    }
}



* VS 코드

IntelliJ 얼티메이트와 유사한 기능을 제공하면서 무료임
각자 자신에게 잘 맞는 툴을 사용하면 된다.

https://code.visualstudio.com/download#

1. VS Code를 실행한다.
2. 좌츠 중상단에 있는 Extensions를 클릭한다.
3. Language Support를 검색하고 가정 위쪽을 선택한다.
   (Red Hat 단체 이름이 붙어있는 것을 볼 수 있다)

* Java Extension Pack 으로 필요한것들을 편리하게 모두 설치할 수 있다.



* 깃허브 회원 가입

https://github.com/



* 비트 연산 예제

public class BitOperation {
    public static void main(String[] args) {
        System.out.println("비트 연산자 예제입니다.");

        int num1 = 5, num2 = 10;
        
        // &은 비트 연산자 AND를 의미함
        // AND 비트 연산의 특징:
        // 같은 자리수에 1이 배치된 경우에만 1이며
        // 그 외의 케이스는 모두 0이다.
        // 집합으로 생각한다면 교집합
        int res = num1 & num2;
        System.out.println("num1 AND num2 = " + res);

        // |는 비트 연산자 OR를 의미함
        // OR 비트 연산의 특징:
        // 같은 자리수에 하나라도 1이 배치되어 있다면 1이고
        // 그렇지 않다면 0 이 된다.
        // 집합으로 보자면 합집합
        res = num1 | num2;
        System.out.println("num1 OR num2 = " + res);

        // ^는 비트 연산자 XOR를 의미함
        // XOR 비트 연산의 특징:
        // 서로 일치하는것이 없는 경우에만 1이 된다.
        res = num1 ^ num2;
        System.out.println("num1 XOR num2 = " + res);

        // ~은 비트 연산자 NOT을 의미함
        // NOT 비트 연산의 특징:
        // 모든것을 부정한다.
        // 참의 부정 = 거짓
        // 거짓의 부정 = 참
        res = ~num1;
        System.out.println("NOT num1 = " + res);
    }
}



* 2진수 체계

Q: 왜 2진수를 알아야 하나요 ?
A: 비트 연산자는 2진수를 기반으로 동작하기 때문이다.

ex) 10진수 3421을 생각해보자!

   3    2    1    0  --- ??? 10^n
   3    4    2    1

3 x 10^3 + 4 x 10^2 + 2 x 10^1 + 1 x 10^0 =
3000 + 400 + 20 + 1 =
3421

핵심 개념: 2진수는 각 자리에 두 가지 숫자만 올 수 있다.
               2진수는 0 ~ 1 즉 두 개의 숫자만 올 수 있다.

ex) 2진수로 10진수 10을 표현해보자!

   3    2    1    0 --- ??? 2^n  --- 2의 n승 자리

   8    4    2    1 --- 계산된 2의 n승 자리

   1    0    1    0

10진수 10은 2진수로 1010(2) 이다.

* 10진수를 2진수로 만드는 가장 빠른 방법

1. 변환하고자 하는 숫자를 선정한다.
    예로 23을 들어보자!
2. 변환하고자 하는 숫자보다 작지만 그 중 가장 큰 2의 n승을 선택한다.
    2^n = 1, 2, 4, 8, 16, 32, 64, ......
    현재 예에서는 16이 선택되며
    16은 2^4 이다.
3. 변환하고자 하는 숫자에서 2번에서 선택한 숫자를 뺀다.
    현재 케이스에서는 23 - 16 = 7 이 된다.
4. 나머지가 0이 될 때까지 2 ~ 3번을 반복한다.
    7을 선정하고 근접한 최대 2의 n승은 4다.
    그러므로 7 - 4 = 3이 된다.
    4는 2^2 이다.
5. 3을 선정하고 근접한 최대 2의 n승은 2다.
    그러므로 3 - 2 = 1이 된다.
    2는 2^1 이다.
6. 1을 선정하고 근접한 최대 2의 n승은 1이다.
    1은 2^0 이다.

10111(2) = 23

검토하고 싶다면

43210

2^4 x 1 +
2^3 x 0 +
2^2 x 1 +
2^1 x 1 +
2^0 x 1 = 16 + 4 + 2 + 1 = 23



숫자 10의 2진수 변환 1010(2)
숫자 5의 2진수 변환   0101(2)

        10     1010
AND   5     0101
-------------------
          0     0000

        10     1010
OR      5     0101
-------------------
        15     1111

8 + 4 + 2 + 1 = 15
16 - 1            = 15

15 = 01111(2)
16 = 10000(2)

7 = 00111(2)
8 = 01000(2)

3 = 00011(2)
4 = 00100(2)

        10     1010
XOR    5     0101
-------------------
        15     1111

NOT    5     0000 0101
--------------------------
         -6     1111 1010

?????? 이게 뭐지 ???

* 일단 컴퓨터에서 음수를 표현하는 방법

int는 정수형임을 모두 알고 있지만 음수 표현법은 좀 별개다.
int는 4 바이트 정수형 데이터 타입
byte는 1 바이트 데이터 타입
float은 4 바이트 실수형 데이터 타입
double은 8 바이트 실수형 데이터 타입

바이트란 ?

컴퓨터가 표현할 수 있는 최소 단위: 비트(bit)
비트(bit)가 8개 모이면 바이트(byte)가 된다.
그러므로 우리가 배웠던 int는 32비트가 된다.
그래서 사실 비트 연산시 32개의 비트를 모두 적어놓는것이 정석이지만
적을 것이 너무 많기 때문에 줄여서 8개 정도로 적어놓고 계산한다.

 7     6     5     4     3    2    1    0   --- 2의 n승 자리
128  64   32   16    8    4    2    1    --- 해당 위치에서의 숫자
 0     0     0     0     0    1    0    1   --- 숫자 5를 2진수로 표현
----------------------------------------
 1     1     1     1     1    0    1    0   --- 이게 왜 -6 인가요 ?

우선 int형은 맨 앞에 비트(bit)가 부호를 의미한다.
맨 앞 bit가 0이면 양수, 1이면 음수입니다.

10진수 6 은 2진수로 110(2)이므로
1 000......... 110(2) 이게 왜 -6 이 아닐까 ?

위의 케이스가 안되는 이유는 0 때문입니다.
+1 + (-1) = 0

0000 0001    = 1
1000 0001    = -1 +
---------------------------
1000 0010    = 0???

1 1111 111
   0000 0001    = 1
   1111 1111    = -1 +
   -------------------------
   0000 0000    = 0

1 1111 11
   0000 0110    = 6
   1111 1010    = -6 +
   -------------------------
   0000 0000    = 0

1 1111 1
   0000 1100    = 12
   1111 0100    = -12 +
   -------------------------
   0000 0000    = 0

1 1111 111
   0000 1101    = 13
   1111 0011    = -13 +
   -------------------------
   0000 0000    = 0



* 어떤 숫자의 음수를 빠르게 만드는 방법

1. 먼저 만들고 싶은 음수의 양수값을 이진수로 작성한다.
2. 가장 낮은 자리에 있는 1을 찾는다.
3. 해당하는 1을 찾은 자리까지의 값은 유지한다.
4. 나머지 값은 전부 반전한다(참 -> 거짓, 거짓 -> 참)
    [ 0 은 1 이 되고, 1 은 0 이 된다 ]



연습 문제 1.

-20을 2진수로 표현해보자!
int는 너무 기니까 8 비트만 표현하도록 한다.

연습 문제 2.

-29를 2진수로 표현해보자!





















