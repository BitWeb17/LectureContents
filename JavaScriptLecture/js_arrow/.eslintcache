[{"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/index.js":"1","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/App.js":"2","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/reportWebVitals.js":"3","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest.js":"4","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest2.js":"5","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest3.js":"6","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest4.js":"7","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/func-test/FuncTest.js":"8","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/func-test/DefaultParam.js":"9","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/exercise/Prob.js":"10"},{"size":1010,"mtime":1612253556789,"results":"11","hashOfConfig":"12"},{"size":528,"mtime":1612247060570,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1612247060570,"results":"14","hashOfConfig":"12"},{"size":389,"mtime":1612247645597,"results":"15","hashOfConfig":"12"},{"size":433,"mtime":1612247747237,"results":"16","hashOfConfig":"12"},{"size":451,"mtime":1612247889780,"results":"17","hashOfConfig":"12"},{"size":734,"mtime":1612248422314,"results":"18","hashOfConfig":"12"},{"size":511,"mtime":1612248643460,"results":"19","hashOfConfig":"12"},{"size":1376,"mtime":1612251770392,"results":"20","hashOfConfig":"12"},{"size":2746,"mtime":1612315372484,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1xrjxmz",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/index.js",[],["45","46"],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/App.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/reportWebVitals.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest2.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest3.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/arrow-test/ArrowFunctionTest4.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/func-test/FuncTest.js",["47"],"const FuncTest = () => {\n    const add = (first, second, ... args) => {\n        console.log(\"first = \" + first + \", second = \" +\n            second + \", args = \" + args)\n\n        let sum = first + second\n\n        for(let i = 0; i < args.length; i++) {\n            sum += args[i]\n        }\n\n        return sum\n    }\n\n    let sum = add(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n    console.log(sum)\n\n    return (\n        <div className=\"FuncTest\">\n            <p>FuncTest</p>\n        </div>\n    )\n}\n\nexport default FuncTest","/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/func-test/DefaultParam.js",[],"/home/bitweb/proj/LectureContents/JavaScriptLecture/js_arrow/src/exercise/Prob.js",["48","49","50","51","52","53"],"const AllocRandomNumber = (arr) => {\n    console.log(\"AllocRandomNumber Called\")\n\n    for(var i = 0; i < arr.length; i++) {\n        arr[i] = Math.floor(Math.random() * 10000) + 1\n    }\n}\n\nconst CheckTeamArrCount = (arr) => {\n    const TEAMMEMNUM = 4\n}\n\nconst CreateRandomTeam = (arr, num) => {\n    console.log(\"CreateRandomTeam Called\")\n\n    const ERROR = -1\n\n    let randNum\n    let range = arr.length / num\n\n    let checkTeamArrCnt = new Array(250)\n\n    // 같은 팀원들에게 같은 숫자를 부여하겠다는 의미(250개가 나오니까)\n    for(var i = 0; i < num; i++) {             // 4\n        for (var j = 0; j < range; ) {   // 250\n            // 1번팀, 2번팀, 3번팀 ...\n            randNum = Math.floor(Math.random() * 250) + 1\n\n            // 전략\n            // 1) 그냥 다 검사해서 집어넣기\n            //    모든 검사를 수행하므로 속도가 느려짐\n            //    반면 팀원들은 인접하지 않은 상태로 배치됨\n            // 2) 검사는 단순화하고 for문을 한 번 더 돌자!\n            //    (내부에 4개짜리 루프를 돌린다)\n            //    팀원끼리 인접해있게 됨\n\n            console.log(\"i = \" + i + \", j = \" + j)\n\n            // 우리는 2번 전략을 사용하도록 한다.\n            if(arr.indexOf(randNum) == ERROR) {\n\n                console.log(\"Insert Array Value = \" + randNum)\n\n                for (var k = j; k < k + num; k++) {\n                    // 0 ~ 999 ---> i, j로 표현하는 방법에 대한 고민이 필요\n                    // j = 0 ~ 3\n                    // i = 0 ~ 250\n                    // i * range + j\n                    // range = 250이므로 여기서 i * range + k를 하면\n                    // 250개 단위로 4개를 할당하는 형식이 된다.\n                    // 결국 0 ~ 999를 표현할 수 있으면서\n                    // 4개씩 끊어칠 수 있게 인덱싱 방식의 수정이 필요\n                    arr[i * range + k] = randNum\n                }\n\n                j += 4\n            }\n        }\n    }\n}\n\nconst CheckWinner = () => {\n\n}\n\nconst CalcDividend = () => {\n\n}\n\nconst Prob = () => {\n    const MAXTEAMNUM = 4\n    const NUMOFPERSON = 1000\n    const FEE = 10000000\n    const PARTICIPANTSTAKE = 0.67\n    const PRICE = NUMOFPERSON * FEE * PARTICIPANTSTAKE\n\n    console.log(\"상금 = \" + PRICE)\n\n    let arr = new Array(NUMOFPERSON)\n    let teamArr = new Array(NUMOFPERSON)\n\n    AllocRandomNumber(arr)\n    console.log(\"After AllocRandomNumber() = \" + arr)\n\n    CreateRandomTeam(teamArr, MAXTEAMNUM)\n    console.log(\"After CreateRandomTeam() = \" + teamArr)\n\n    return (\n        <div className=\"Prob\">\n            <p>Prob</p>\n        </div>\n    )\n}\n\nexport default Prob",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":36,"nodeType":"60","messageId":"61","endLine":2,"endColumn":37,"fix":"62"},{"ruleId":"63","severity":1,"message":"64","line":9,"column":7,"nodeType":"65","messageId":"66","endLine":9,"endColumn":24},{"ruleId":"63","severity":1,"message":"67","line":10,"column":11,"nodeType":"65","messageId":"66","endLine":10,"endColumn":21},{"ruleId":"63","severity":1,"message":"68","line":21,"column":9,"nodeType":"65","messageId":"66","endLine":21,"endColumn":24},{"ruleId":"69","severity":1,"message":"70","line":40,"column":37,"nodeType":"71","messageId":"72","endLine":40,"endColumn":39},{"ruleId":"63","severity":1,"message":"73","line":62,"column":7,"nodeType":"65","messageId":"66","endLine":62,"endColumn":18},{"ruleId":"63","severity":1,"message":"74","line":66,"column":7,"nodeType":"65","messageId":"66","endLine":66,"endColumn":19},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"rest-spread-spacing","Unexpected whitespace after rest operator.","RestElement","unexpectedWhitespace",{"range":"77","text":"78"},"no-unused-vars","'CheckTeamArrCount' is assigned a value but never used.","Identifier","unusedVar","'TEAMMEMNUM' is assigned a value but never used.","'checkTeamArrCnt' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CheckWinner' is assigned a value but never used.","'CalcDividend' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[60,61],""]