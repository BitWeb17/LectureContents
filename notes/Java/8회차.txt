1 - 클래스 숙제 피드백

2 - 클래스 추가 문제 풀어보기

1) 3 의 배수는 더하고 5 의 배수는 뺀다.
   덧셈만한 최종 결과값과 뺄셈만한 최종 결과를 확인해보자!
   마지막으로 두 값의 합을 return(반환)하도록 매서드를 만들어보자!
   
2) 여기는 A 사의 B-23 물류창고다.
   이 물류 창고에는 많은 수의 화물이 적재되는데
   화물을 적재하는 기준이 64 개 단위다.
   어떤 수량의 화물이 오던지
   화물을 창고에 저장할 수 있게 프로그래밍 해보자
   (화물의 크기는 균일하다고 가정한다)
   물류 창고로 들어오는 화물의 개수는
   1000 ~ 50000 개 사이로 들어온다 가정한다.
   
3) 학급에 학생이 20 명 있다.
   각 학생의 성적을 랜덤으로 기록해준다(입력으로 받으면 힘드니까)
   전체 학생들의 평균을 구하고 표준편차와 분산을 구해보자
   (분산과 표준편차 공식을 잘 모른다면 패스해도 OK)
   
* 문제 풀이를 하면서 새롭게 익히거나 다시 정리한 내용

1. 클래스 매서드의 입력 인자 여러개 만들기
2. AND NOT 개념(물류 창고 시스템)
3. 생성자(Constructor) 개념
4. Math.pow(제곱), Math.sqrt(루트)



* 생성자를 사용하는 이유

1) 편리해서
2) 생성자를 대체할 수 있는 녀석은 Setter 이다.

- 그러면 왜 Setter 도 있고 생성자도 따로 있을까 ?

Setter 는 값을 바꿔야 하는 경우에 보통 사용하고
데이터 오염도를 낮추기 위해서는 최대한 Setter 사용을 자제해야 한다.

초기에 값을 할당하는 목적으로 생성자를 보통 사용한다.

ex)
String name;
int age;
String major;

public void setName(String name) {
   this.name = name;
}

public void setAge(int age) {
   this.age = age;
}

public void setMajor(String major) {
   this.major = major;
}

ClassName cn = new ClassName();
cn.setName("아무개");
cn.setAge(15);
cn.setMajor("프로게이머");

*******************    vs    *******************

public ClassName(String name, int age, String major) {
   this.name = name;
   this.age = age;
   this.major = major;
}

ClassName cn = new ClassName("아무개", 15, "프로게이머");

위 쪽의 코드를 사용할 것인지 vs 아래쪽의 코드를 사용할 것인지를 보면 된다.
결국 생성자를 사용하는 이유는 누가 더 편리한가이다.



* Q: 생성자가 있는데 구지 Setter 를 써야 하나 ?
  A: 넵
  
생성자는 초기화(초기값을 할당하는 작업)에만 사용이 가능하다.
반면 Setter 는 초기화가 된 이후에도
언제든지 값을 변경할 수 있다.
(그러나 남발하면 위에서 언급한 데이터 오염도가 높아



* Q: 추가 질문 사항

Test t1 = new Test(1, 2, 3);
Test t2 = new Test(4, 5, 6);

t1 과 t2 가 서로에게 영향을 줄 수 있을까 ?
t1 은 별도의 메모리 공간을 제어
t2 도 별개의 메모리 공간을 제어하는 것임
그러므로 현재 상황에서 t1 과 t2 가 서로 영향을 주는 일은 없다.

t1.add(1);
t1.print();

t2.print();

-------------------          -------------------
|  Test 클래스 정보  |         |  Test 클래스 정보  |
-------------------          -------------------
        t1                           t2
        
        위의 두 개는 서로 독립적이다.
